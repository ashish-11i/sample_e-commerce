package com.website.ecommerce.controllers;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.website.ecommerce.config.AppConstants;
import com.website.ecommerce.dao.RoleRepo;
import com.website.ecommerce.dto.LoginRequest;
import com.website.ecommerce.dto.UserDto;
import com.website.ecommerce.entities.Role;
import com.website.ecommerce.response.LoginResponse;
import com.website.ecommerce.response.ResponseModel;
import com.website.ecommerce.security.CustomUserDetailsService;
import com.website.ecommerce.security.JwtUtils;
import com.website.ecommerce.services.UserService;

@RestController
public class AuthController {
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	
	@Autowired
	private JwtUtils jwtUtils;
	
	@PostMapping("/login/")
	public ResponseEntity<ResponseModel> loginUser(@RequestBody LoginRequest loginRequest) throws Exception{
		
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
		}catch(BadCredentialsException e) {
			throw new Exception("Incorrect username or password");
		}
		
		UserDetails userDetails = customUserDetailsService.loadUserByUsername(loginRequest.getUsername());
		String token = jwtUtils.generateToken(userDetails);
		return new ResponseEntity<ResponseModel>(new ResponseModel(true, HttpStatus.OK, new LoginResponse(loginRequest.getUsername(), "you have been loggedin successfully", token), null, null), HttpStatus.OK);
	}
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private RoleRepo roleRepo;
	
	@PostMapping("/user/register")
	ResponseEntity<ResponseModel> registerNewUser(@Valid @RequestBody UserDto userDto) {
		
		Role role = roleRepo.findById(AppConstants.NORMAL_USER).get();
		
		return new ResponseEntity<ResponseModel>(new ResponseModel(
				true, HttpStatus.OK, userService.registerNewUser(userDto,role), null, "You have logedin successfully"), HttpStatus.CREATED);
	}
}
